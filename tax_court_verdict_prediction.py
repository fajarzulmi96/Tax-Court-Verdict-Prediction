# -*- coding: utf-8 -*-
"""Tax Court Verdict Prediction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DbsO2RqayvZwdtAoo8WqYXboZsOUfpEB

## **Preparation**
"""

from google.colab import files
files.upload()

import pandas as pd
import numpy as np
from sklearn import preprocessing

df = pd.read_excel('resume_putusan_sengketa_formal.xlsx')
df.head()

df = df.drop(columns=['NOPUTPP'])
df = df.drop(columns=['Isu Utama'])
df = df.drop(columns=['Menurut Terbanding/Tergugat'])
df = df.drop(columns=['Menurut Pemohon Banding/Penggugat (WP)'])
df = df.drop(columns=['Menurut Majelis Hakim'])

df.head()

"""Cleansing"""

df = df.dropna(axis=0, how="any")

df.lawan_PKP.astype(int)
 df.FP_lengkap.astype(int)
 df.Ket_FP_sesuai.astype(int)

Jenis_Sengketa= df['Jenis Sengketa'].values
Variabel_Putusan = df[['lawan_PKP', 'FP_lengkap', 'FP_tepat_waktu','FP_diganti_dibatalkan','FP_tdk_double_kredit','Ket_FP_sesuai','lawan_disanksi','lawan_lapor','minta_tggjwb_lawan','PPN_telah_dibayar','Amar']].values

from sklearn.model_selection import train_test_split
Jenis_Sengketa_latih, Jenis_Sengketa_test, Variabel_Putusan_latih, Variabel_Putusan_test = train_test_split(Jenis_Sengketa, Variabel_Putusan, test_size=0.2)

import tensorflow as tf
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.layers import LSTM,Dense,Embedding,Dropout
from tensorflow.keras.models import Sequential
from tensorflow.keras.optimizers import Adam

from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
 
tokenizer = Tokenizer(num_words=5000, oov_token='x')
tokenizer.fit_on_texts(Jenis_Sengketa_latih) 
tokenizer.fit_on_texts(Jenis_Sengketa_test)
 
sekuens_latih = tokenizer.texts_to_sequences(Jenis_Sengketa_latih)
sekuens_test = tokenizer.texts_to_sequences(Jenis_Sengketa_test)
 
padded_latih = pad_sequences(sekuens_latih) 
padded_test = pad_sequences(sekuens_test)
print(padded_test.shape)

padded_latih

padded_test

model = tf.keras.Sequential([
    tf.keras.layers.Embedding(input_dim=num_words, output_dim=64, input_length=max_len),
    tf.keras.layers.LSTM(128),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Dense(5, activation='softmax')
])
model.compile(optimizer='adam', metrics=['accuracy'], loss='categorical_crossentropy',)
model.summary()

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy')>0.9 and logs.get('val_accuracy')>0.9):
      print("\nAkurasi train dan validasi didapat telah mencapai nilai > 90%!")
      self.model.stop_training = True
callbacks = myCallback()

num_epochs = 20
history = model(padded_latih, Variabel_Putusan_latih, epochs=num_epochs,
                    validation_data=(padded_test, Variabel_Putusan_test), verbose=2, callbacks=[callbacks], validation_steps=30)